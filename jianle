from __future__ import print_function,division
'''
#1.数据预处理
import os,shutil
import numpy as np
import pdb

#随机种子设置
random_state = 42
np.random.seed(random_state)

#kaggle原始数据集
original_dataset_dir = 'C:\\Users\\jianle\\train'
total_num = int(len(os.listdir(original_dataset_dir))/2)
random_idx = np.array(range(total_num))
np.random.shuffle(random_idx)

#待处理的数据集地址
base_dir = 'cats_and_dogs_small'
if not os.path.exists(base_dir):
    os.mkdir(base_dir)
  
#训练集、测试集的划分
sub_dirs = ['train','test']
animals = ['cats','dogs']
train_idx = random_idx[:int(total_num*0.9)]
test_idx = random_idx[int(total_num*0.9):]
numbers = [train_idx,test_idx]
for idx,sub_dir in enumerate(sub_dirs):
    dir = os.path.join(base_dir,sub_dir)
    if not os.path.exists(dir):
        os.mkdir(dir)
    for animal in animals:
        animal_dir = os.path.join(dir,animal)
        if not os.path.exists(animal_dir):
            os.mkdir(animal_dir)
        fnames = [animal[:-1]+'.{}.jpg'.format(i) for i in numbers[idx]]

        for fname in fnames:
            src = os.path.join(original_dataset_dir,fname)
            dst = os.path.join(animal_dir,fname)
            shutil.copyfile(src,dst)
#验证照片数目
        print(dir+'total images: %d'%(len(os.listdir(animal_dir))))
'''
#2.配置库和参数

import shutil
import torch
import os
import torch.nn as nn
import torch.nn.functional as F
from torch.autograd import Variable
import numpy as np
from torch.utils.data import Dataset,DataLoader
from torchvision import transforms,datasets,utils
from torch.utils.data import DataLoader
import torch.optim as optim
#配置参数
torch.manual_seed(1)#随机数种子
epochs = 20
batch_size = 3

num_workers = 0#多线程数目

#3.加载数据，数据预处理
data_transform = transforms.Compose([
    transforms.Resize(210),
    transforms.CenterCrop(200),
    transforms.ToTensor(),
    #transforms.Normalize(mean=[0.485,0.456,0.406],std=[0.229,0.224,0.225])
])
#数据批处理，尺寸大小为batch_size
train_dataset = datasets.ImageFolder(root='C:/Users\\jianle/cats_and_dogs_small/train/',transform=data_transform)
train_loader = torch.utils.data.DataLoader(train_dataset,batch_size=batch_size,shuffle=True,num_workers=num_workers)
test_dataset = datasets.ImageFolder(root='C:/Users/jianle/cats_and_dogs_small/test/',transform=data_transform)
test_loader = torch.utils.data.DataLoader(test_dataset,batch_size=batch_size,shuffle=True,num_workers=num_workers)

#4.创建神经网络模型

#创建模型
class Net(nn.Module):
    def __init__(self):
        super(Net,self).__init__()
        self.conv = nn.Sequential(
            nn.Conv2d(3,6,5,stride=1,padding=2),
            nn.ReLU(True),
            nn.MaxPool2d(2,2),
            nn.Conv2d(6,16,5,stride=1,padding=2),
            nn.ReLU(True),
            nn.MaxPool2d(2,2)
            )
        
        self.fc = nn.Sequential(
            nn.Linear(16*50*50,1024),
            nn.Linear(1024,512),
            nn.Linear(512,2))
    def forward(self,x):
       
        out = self.conv(x)
        out = out.view(-1,16*50*50)
        out = self.fc(out)
        
        return out
net = Net()
net.cuda()
#print(net)

#定义loss和optimzer
criterion = nn.CrossEntropyLoss()
optimizer = optim.SGD(net.parameters(),lr=0.001)
#5.整体训练和测试框架
print('gpu = {}'.format(torch.cuda.is_available()))
#开始训练
#net.train()
use_gpu = 1
for epoch in range(epochs):
    running_loss = 0
    train_correct = 0
    train_total = 0
    for i,data in enumerate(train_loader,1):
        inputs,train_labels = data
        if use_gpu:
            inputs = Variable(inputs.cuda())
            labels = Variable(train_labels.cuda())
        else:
            inputs,labels = Variable(inputs),Variable(train_labels)
        optimizer.zero_grad()
        
        outputs = net(inputs)
       
        _,train_predicted = torch.max(outputs.data,1)
        
        train_correct += (train_predicted == labels.data).sum()
        loss = criterion(outputs,labels)
        loss.backward();
        optimizer.step()
        running_loss += loss.item()*labels.size(0)
        train_total += train_labels.size(0)
    print('train %d epoch loss: %.3f acc: %.3f '%(epoch+1,running_loss/train_total,100*train_correct/train_total))
    #模型测试
    correct = 0
    test_loss = 0.0
    test_total = 0
    net.eval()
    for data in test_loader:
        images,labels = data
        if use_gpu:
            images,labels = Variable(images.cuda()),Variable(labels.cuda())
        else:
            images,labels= Variable(images),Variable(labels)
        outputs = net(images)
        _,predicted = torch.max(outputs.data,1)
        loss = criterion(outputs.data,labels)
        test_loss += loss.item()*labels.size(0)
        test_total += labels.size(0)
        correct += (predicted == labels.data).sum()
    print('test %d epoch loss: %.3f acc: %.3f '%(epoch+1,test_loss/test_total,100*correct/test_total))
